{
    "apiVersion": "1.0.0",
    "swaggerVersion": "1.2",
    "apis": [
        {
            "path": "/client",
            "description": "Operations about clients for the lab"
        },
        {
            "path": "/sensor",
            "description": "Operations about sensors"
        },
        {
            "path": "/actuator",
            "description": "Operations about actuators"
        },
        {
            "path": "/logging",
            "description": "Operations to retrieve user interaction and lab logging info"
        },
        {
            "path": "/",
            "description": "A general endpoint that allows to access any operation on any service"
        }
    ],
    "authorizations": {
        "goLabBooking": {
            "type": "apiKey",       /* this could be changed to bookingKey or something else */
            "passAs": "query",
            "keyName": "authToken",
            "authServiceUrl": "http://booking.golabz.eu/auth"
        }
    },
    "concurrency": {        /* Swagger extension:  */
        "interactionMode": "synchronous",  /* can also be 'asynchronous' */
        "concurrencyScheme": "roles",   /* can also be 'concurrent' then all users have access at the same time */
        "roleSelectionMechanism": ["race", "interruptor"],  /* can also be 'queue', 'external role', 'dynamic role'  */
        "roles": [
            {
                "role": "observer",
                "selectionMechanism": "race",
                "availableApis": ["getSensors"]     /* a list of paths or operation nicknames */
            },
            {
                "role": "controller",
                "selectionMechanism": "race"
            },
            {
                "role": "admin",
                "selectionMechanism": "race",
                "selectionMechanism": "interruptor"
            }
        ]
    },
    "info": {
        "title": "RED Lab smart device",
        "description": "This is an example implementation of the Go-Lab smart device in LabView and demonstrates an mechatronics remote lab running at EPFL",
        "termsOfServiceUrl": "http://helloreverb.com/terms/",
        "contact": "christophe.salzmann@epfl.ch",
        "license": "Apache 2.0",
        "licenseUrl": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
}