{
    "apiVersion": "1.0.0",
    "swaggerVersion": "1.2",
    "basePath": "http://redlab.epfl.ch/smartdevice",
    "resourcePath": "/actuator",
    "protocol": "WebSocket",
    "produces": [
        "application/json"
    ],
    "apis": [
        {
            "path": "/actuator/",
            "operations": [
                {
                    "method": "Send",
                    "nickname": "getActuatorMetadata",
                    "summary": "List all actuators and their metadata",
                    "type": "ActuatorMetadataResponse",
                    "parameters": [
                        {
                            "name": "body",
                            "description": "the payload for the getActuatorMetadata service",
                            "required": true,
                            "paramType": "body",
                            "type": "PublicRequest",
                            "allowMultiple": false
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 404,
                            "message": "No actuators found"
                        },
                        {
                            "code": 405,
                            "message": "Method not allowed. The requested method is not allowed by this server."
                        },
                        {
                            "code": 422,
                            "message": "The request body is unprocessable"
                        }
                    ],
                    "authorizations": {}
                },
                {
                    "method": "Send",
                    "summary": "Send new data to the actuator with the given actuator identifier",
                    "notes": "The parameters go into a JSON object send over the WebSocket",
                    "type": "ActuatorDataResponse",
                    "nickname": "sendActuatorData",
                    "parameters": [
                        {
                            "name": "body",
                            "description": "The payload for the sendActuatorData service",
                            "required": true,
                            "type": "ActuatorDataRequest",
                            "paramType": "body",
                            "allowMultiple": false
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 401,
                            "message": "Unauthorised access. The authentication token is not valid"
                        },
                        {
                            "code": 402,
                            "message": "Too many users"
                        },
                        {
                            "code": 404,
                            "message": "No actuator not found"
                        },
                        {
                            "code": 405,
                            "message": "Method not allowed. The requested method is not allowed by this server."
                        },
                        {
                            "code": 422,
                            "message": "The request body is unprocessable"
                        }
                    ]
                }
            ]
        }
    ],
    "models": {
        "Actuator": {
            "id": "Actuator",
            "required": [
                "actuatorId", "fullName"
            ],
            "properties": {
                "actuatorId": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "webSocketType": {
                    "type": "string",
                    "description": "the type of WebSocket. WebSockets can either be binary or textual.",
                    "enum": [
                        "text",
                        "binary"
                    ],
                    "defaultValue": "text"
                },
                "singleWebSocketRecommended": {
                    "type": "boolean",
                    "description": "If this field is set to true it means that the smart device expects that a client opens a dedicated websocket for to read from this value",
                    "defaultValue": false
                },
                "consumes": {                   /* should this be on sensor or value level? */
                    "type": "string",
                    "description": "The mime-type of the data that is consumed by this actuator. A list of mime types can be found at http://en.wikipedia.org/wiki/Internet_media_type",
                    "defaultValue": "application/json"
                },
                "produces": {                   /* should this be on sensor or value level? */
                    "type": "string",
                    "description": "The mime-type of the data that is produced by this actuator. A list of mime types can be found at http://en.wikipedia.org/wiki/Internet_media_type",
                    "defaultValue": "application/json"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "Value"
                    }
                },
                "configuration": {
                    "type": "array",
                    "description": "The configuration consists of an array of JSON objects that consist of parameter and type",
                    "items": {
                        "$ref": "ConfigurationMetadataItem"    /* extended Swagger with object type */
                    }
                },
                "accessMode": {
                    "type": "AccessMode"
                }
            }
        },
        "ActuatorMetadataResponse": {
            "id": "ActuatorMetadataResponse",
            "required": [
                "method", "actuators"
            ],
            "properties": {
                "method": {
                    "type": "string",
                    "description": "The method should be equal to the nickname of one of the provided services."
                },
                "actuators": {
                    "type": "array",
                    "items": {
                        "$ref": "Actuator"
                    },
                    "description": "The list of actuator metadata elements"
                }
            }
        },
        "ActuatorDataRequest": {
            "id": "ActuatorDataRequest",
            "required": [
                "authToken", "method", "actuatorId"
            ],
            "properties": {
                "authToken": {
                    "type": "string"
                },
                "method": {
                    "type": "string",
                    "description": "The method should be equal to the nickname of one of the provided services."
                },
                "actuatorId": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "description": "An ordered array with all the value names of this sensor. The same order will be applied to the data array and lastMeasured array.",
                    "items": {
                        "type": "string"
                    }
                },
                "data": {
                    "type": "array",
                    "description": "An ordered array with all the data values of this sensor. Each data element in the array should be ordered in the same position of its corresponding value elements in the values array.",
                    "items": {
                        "type": "any"           /* extended Swagger with any type -- this represents any possible type */
                    }
                },
                "configuration": {
                    "type": "array",
                    "items": {
                        "$ref": "ConfigurationItem"
                    }
                },
                "accessMode": {
                    "type": "string",
                    "description": "The access mode allows the client to by pass any concurrency mechanism of the controller mode. By default, it is set to 'normal' which means that the waiting queue should be respected. If it is set to 'urgent', the client should be put as the next user in line. If it is set 'interrupt' the client that is currently using the smart device should be aborted and this client should get controller mode access.",
                    "enum": [
                        "normal",
                        "urgent",
                        "interrupt"
                    ],
                    "defaultValue": "normal"
                }
            }
        },
        "ActuatorDataResponse": {
            "id": "ActuatorDataResponse",
            "required": [
                "method"
            ],
            "properties": {
                "method": {
                    "type": "string",
                    "description": "The method should be equal to the nickname of one of the provided services."
                },
                "lastMeasured": {
                    "type": "date-time"
                },
                "controllerMode": {
                    "type": "ControllerMode",
                    "description": "There can be only one mode, either controllerMode is declared or observerMode"
                },
                "observerMode": {
                    "type": "ObserverMode",
                    "description": "There can be only one mode, either controllerMode is declared or observerMode"
                }
            }
        },
        "ActuatorControllerMode": {
            "id": "ControllerMode",
            "required": [],
            "properties": {
                "payload": {
                    "type": "object",
                    "description": "The payload can be useful for describing a result that is returned. Since results can differ from acknowledgements to result data, the field is optional and can contain any JSON object."
                }
            }
        },
        "ObserverMode": {
            "id": "ObserverMode",
            "required": [],
            "properties": {
                "queueSize": {
                    "type": "integer",
                    "description": "Provides the length of the user waiting queue that want to get control of the lab"
                },
                "queuePosition": {
                    "type": "integer",
                    "description": "Provides the position of the client who made this call in the user waiting queue. This value should be positive and smaller or equal to queueSize."
                },
                "estimatedTimeUntilControl": {
                    "type": "integer",
                    "description": "The estimated waiting time from now on until the client will get controllerMode access. The time is expressed in seconds."
                }
            }
        }
    }
}
